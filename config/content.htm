<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41223143/">https://mdecd2025.github.io/hw-41223143/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223143">https://github.com/mdecd2025/hw-41223143</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h1>task</h1>
<h2>task5</h2>
<p>5.請詳細說明如何採手動方式在 Webots 建立下列場景:</p>
<p>6希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</p>
<p>步驟一：創建一個新的 Webots 專案<br/>啟動 Webots：打開 Webots 軟體。</p>
<p>創建新專案：</p>
<p>點擊 File (檔案) 菜單，選擇 New Project Directory (新建專案目錄)。</p>
<p>輸入專案名稱並選擇儲存位置。</p>
<p>確保勾選 "Create a new world" (創建新世界) 選項，這樣 Webots 會自動為您創建一個新的 .wbt 世界文件。</p>
<p>步驟二：設置地面 (Ground)<br/>打開場景編輯器：在左側的「場景樹」中，您將看到一個名為 default 的世界。點擊這個世界，然後選擇 Add (添加)。</p>
<p>添加地面：</p>
<p>在彈出的窗口中選擇 Solid，這樣可以添加一個固體物體。</p>
<p>在「位置」(Translation) 欄位中，將 Z 軸設置為 -0.1，這樣地面會稍微下降，避免與其他物體重疊。</p>
<p>在 Appearance 欄位中，選擇顏色或貼圖來設置地面的外觀。通常我們可以選擇顏色，例如 Gray (灰色)，這樣看起來像是地面。</p>
<p>步驟三：添加障礙物<br/>添加一個障礙物：</p>
<p>點擊 Add (添加) 按鈕，再選擇 Solid 來添加一個固體物體作為障礙物。</p>
<p>將物體的 Translation 欄位設置為 (0, 0, 0.1)，讓它位於地面上方。</p>
<p>您可以改變它的 Size (大小) 欄位，例如設置為 (0.5, 0.5, 0.5)，這樣它會成為一個 0.5 米見方的立方體障礙物。</p>
<p>變更其外觀，在 Appearance 欄位選擇 Color 或 Texture 來設置障礙物的顏色或貼圖。</p>
<p>步驟四：添加機器人<br/>選擇機器人模型：</p>
<p>點擊 Add (添加)，在彈出的選擇框中選擇 Robot 類型，您可以選擇 Webots 提供的預設機器人模型，比如 e-puck 或 Simple Robot。</p>
<p>點擊 Add，這樣機器人就會被加入到場景中。</p>
<p>設定機器人的位置：</p>
<p>點擊場景樹中的機器人，進入其 Translation (位置) 欄位。</p>
<p>將其位置設置為 (0, 0, 0.3)，這樣它會位於地面之上，且不會與障礙物重疊。</p>
<p>步驟五：設置機器人控制器<br/>設置機器人的控制程式：</p>
<p>在機器人物件的 Controller 欄位，選擇一個預設的控制程式，或者點擊 New 來創建一個新的控制程式。</p>
<p>若選擇新建控制程式，Webots 會要求您指定程式語言（C、C++、Python 等），並自動在專案中創建一個新的控制器文件。</p>
<p>您可以選擇使用預設控制器，或編寫您自己的程式來控制機器人的行為，例如使用 Python 控制機器人的簡單前進。</p>
<p>步驟六：保存和運行場景<br/>保存世界文件：確保所有的修改都已經保存，點擊 File (檔案)，選擇 Save World 來保存當前世界文件。</p>
<p>運行場景：</p>
<p>點擊上方的綠色播放按鈕，Webots 會啟動模擬，並執行您設置的機器人控制程式。</p>
<p>您可以觀察機器人如何在世界中移動，並與障礙物進行互動。</p>
<p>特別注意的要點：<br/>位置設置：當設置機器人和障礙物的位置時，確保它們不會重疊在一起，這樣避免模型無法正常運行。特別注意 Translation 的 Z 軸值，它控制物體的垂直位置。</p>
<p>控制程式設定：每個機器人都需要指定一個控制程式。您可以使用預設的控制程式來測試機器人的基本行為，但若需要自定義行為，必須撰寫相應的控制程式。</p>
<p>物理屬性：設置物體的物理屬性（如質量、摩擦係數）時，請注意這會影響模擬的結果。例如，障礙物應該設置為具有較高的摩擦係數，而地面則可以選擇較低的摩擦，以模擬正常的行走環境。</p>
<p>機器人模型選擇：Webots 提供多種機器人模型，您可以根據需要選擇適合的機器人。在選擇機器人時，請確保其有正確的控制程式並與您的場景相匹配。</p>
<ol data-end="932" data-start="671">
<li class="" data-end="932" data-start="671">
<p class="" data-end="686" data-start="674"><strong data-end="685" data-start="674">添加一個障礙物</strong>：</p>
<ul data-end="932" data-start="690">
<li class="" data-end="736" data-start="690">
<p class="" data-end="736" data-start="692">點擊<span> </span><code data-end="700" data-start="695">Add</code><span> </span>(添加) 按鈕，再選擇<span> </span><code data-end="720" data-start="713">Solid</code><span> </span>來添加一個固體物體作為障礙物。</p>
</li>
<li class="" data-end="790" data-start="740">
<p class="" data-end="790" data-start="742">將物體的<span> </span><code data-end="760" data-start="747">Translation</code><span> </span>欄位設置為<span> </span><code data-end="780" data-start="767">(0, 0, 0.1)</code>，讓它位於地面上方。</p>
</li>
<li class="" data-end="867" data-start="794">
<p class="" data-end="867" data-start="796">您可以改變它的<span> </span><code data-end="810" data-start="804">Size</code><span> </span>(大小) 欄位，例如設置為<span> </span><code data-end="842" data-start="825">(0.5, 0.5, 0.5)</code>，這樣它會成為一個 0.5 米見方的立方體障礙物。</p>
</li>
<li class="" data-end="932" data-start="871">
<p class="" data-end="932" data-start="873">變更其外觀，在<span> </span><code data-end="893" data-start="881">Appearance</code><span> </span>欄位選擇<span> </span><code data-end="906" data-start="899">Color</code><span> </span>或<span> </span><code data-end="918" data-start="909">Texture</code><span> </span>來設置障礙物的顏色或貼圖。</p>
<p class="" data-end="932" data-start="873"></p>
<strong>步驟四：添加機器人</strong></li>
</ul>
</li>
</ol>
<ol data-end="1202" data-start="952">
<li class="" data-end="1092" data-start="952">
<p class="" data-end="967" data-start="955"><strong data-end="966" data-start="955">選擇機器人模型</strong>：</p>
<ul data-end="1092" data-start="971">
<li class="" data-end="1062" data-start="971">
<p class="" data-end="1062" data-start="973">點擊<span> </span><code data-end="981" data-start="976">Add</code><span> </span>(添加)，在彈出的選擇框中選擇<span> </span><code data-end="1005" data-start="998">Robot</code><span> </span>類型，您可以選擇 Webots 提供的預設機器人模型，比如<span> </span><code data-end="1044" data-start="1036">e-puck</code><span> </span>或<span> </span><code data-end="1061" data-start="1047">Simple Robot</code>。</p>
</li>
<li class="" data-end="1092" data-start="1066">
<p class="" data-end="1092" data-start="1068">點擊<span> </span><code data-end="1076" data-start="1071">Add</code>，這樣機器人就會被加入到場景中。</p>
</li>
</ul>
</li>
<li class="" data-end="1202" data-start="1094">
<p class="" data-end="1110" data-start="1097"><strong data-end="1109" data-start="1097">設定機器人的位置</strong>：</p>
<p class="" data-end="1153" data-start="1116">點擊場景樹中的機器人，進入其<span> </span><code data-end="1144" data-start="1131">Translation</code><span> </span>(位置) 欄位。</p>
<p class="" data-end="1153" data-start="1116">將其位置設置為<span> </span><code data-end="1180" data-start="1167">(0, 0, 0.3)</code>，這樣它會位於地面之上，且不會與障礙物重疊。</p>
</li>
</ol>
<blockquote>
<h5 data-end="1224" data-start="1204">步驟五：設置機器人控制器</h5>
<p><strong>步驟五：設置機器人控制器</strong></p>
</blockquote>
<ol data-end="1438" data-start="1225">
<li class="" data-end="1438" data-start="1225">
<p class="" data-end="1243" data-start="1228"><strong data-end="1242" data-start="1228">設置機器人的控制程式</strong>：</p>
<ul data-end="1438" data-start="1247">
<li class="" data-end="1308" data-start="1247">
<p class="" data-end="1308" data-start="1249">在機器人物件的<span> </span><code data-end="1269" data-start="1257">Controller</code><span> </span>欄位，選擇一個預設的控制程式，或者點擊<span> </span><code data-end="1295" data-start="1290">New</code><span> </span>來創建一個新的控制程式。</p>
</li>
<li class="" data-end="1377" data-start="1312">
<p class="" data-end="1377" data-start="1314">若選擇新建控制程式，Webots 會要求您指定程式語言（C、C++、Python 等），並自動在專案中創建一個新的控制器文件。</p>
</li>
<li class="" data-end="1438" data-start="1381">
<p class="" data-end="1438" data-start="1383">您可以選擇使用預設控制器，或編寫您自己的程式來控制機器人的行為，例如使用 Python 控制機器人的簡單前進。</p>
<strong>步驟六：保存和運行場景</strong></li>
</ul>
</li>
</ol>
<ol data-end="1620" data-start="1460">
<li class="" data-end="1528" data-start="1460">
<p class="" data-end="1528" data-start="1463"><strong data-end="1473" data-start="1463">保存世界文件</strong>：確保所有的修改都已經保存，點擊<span> </span><code data-end="1496" data-start="1490">File</code><span> </span>(檔案)，選擇<span> </span><code data-end="1517" data-start="1505">Save World</code><span> </span>來保存當前世界文件。</p>
</li>
<li class="" data-end="1620" data-start="1529">
<p class="" data-end="1541" data-start="1532"><strong data-end="1540" data-start="1532">運行場景</strong>：</p>
<p class="" data-end="1587" data-start="1547">點擊上方的綠色播放按鈕，Webots 會啟動模擬，並執行您設置的機器人控制程式。</p>
<p class="" data-end="1620" data-start="1593">您可以觀察機器人如何在世界中移動，並與障礙物進行互動。</p>
<strong>特別注意的要點:</strong></li>
</ol>
<ol data-end="1984" data-start="1639">
<li class="" data-end="1728" data-start="1639">
<p class="" data-end="1728" data-start="1642"><strong data-end="1650" data-start="1642">位置設置</strong>：當設置機器人和障礙物的位置時，確保它們不會重疊在一起，這樣避免模型無法正常運行。特別注意<span> </span><code data-end="1709" data-start="1696">Translation</code><span> </span>的 Z 軸值，它控制物體的垂直位置。</p>
</li>
<li class="" data-end="1810" data-start="1733">
<p class="" data-end="1810" data-start="1736"><strong data-end="1746" data-start="1736">控制程式設定</strong>：每個機器人都需要指定一個控制程式。您可以使用預設的控制程式來測試機器人的基本行為，但若需要自定義行為，必須撰寫相應的控制程式。</p>
</li>
<li class="" data-end="1904" data-start="1812">
<p class="" data-end="1904" data-start="1815"><strong data-end="1823" data-start="1815">物理屬性</strong>：設置物體的物理屬性（如質量、摩擦係數）時，請注意這會影響模擬的結果。例如，障礙物應該設置為具有較高的摩擦係數，而地面則可以選擇較低的摩擦，以模擬正常的行走環境。</p>
</li>
<li class="" data-end="1984" data-start="1906">
<p class="" data-end="1984" data-start="1909"><strong data-end="1920" data-start="1909">機器人模型選擇</strong>：Webots 提供多種機器人模型，您可以根據需要選擇適合的機器人。在選擇機器人時，請確保其有正確的控制程式並與您的場景相匹配。</p>
</li>
</ol><h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223143</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oac3GhN6CKg?si=B4eYYbVmrqPQpI93" title="YouTube video player" width="560"></iframe></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>